using System;
using System.Collections.Concurrent;
using System.Numerics;
using System.Threading.Tasks;

namespace LearnCSharpCollections
{
    static class BlockingPractice
    {
        private static BlockingCollection<BigInteger> bc;

        private static void Producer(object n)
        {
            for (int i = 1; i <= (int)n; i++)
            {
                BigInteger fact = 1;
                for (int j = 1; j <= i; fact *= j++) { } ;
                
                Console.WriteLine("+ Генерируеться факториал числа !" + i + " - " + fact);
                bc.Add(fact);
            }
            
            bc.CompleteAdding();
        }

        private static void Consumer()
        {
            BigInteger sum = 0;
            while (!bc.IsCompleted)
                if (bc.TryTake(out BigInteger temp))
                {
                    sum += temp;
                    Console.WriteLine("- Потребляеться число " + temp);
                }

            Console.WriteLine("Общая сумма: " + sum);
        }

        static void Main(string[] args)
        {
            bc = new BlockingCollection<BigInteger>(2);
            
            Console.Write("Сумма факторилалов !1..!n. Введите n: ");
            int n = Convert.ToInt32(Console.ReadLine());

            Task prod = new Task(Producer, n);
            Task con = new Task(Consumer);

            con.Start();
            prod.Start();

            try
            {
                Task.WaitAll(con, prod);
            }
            catch (AggregateException exc)
            {
                Console.WriteLine(exc);
            }
            finally
            {
                con.Dispose();
                prod.Dispose();
                bc.Dispose();
            }
        }
    }
}

/*
 
Сумма факторилалов !1..!n. Введите n: 30
+ Генерируеться факториал числа !1 - 1
+ Генерируеться факториал числа !2 - 2
+ Генерируеться факториал числа !3 - 6
- Потребляеться число 1
- Потребляеться число 2
- Потребляеться число 6
+ Генерируеться факториал числа !4 - 24
+ Генерируеться факториал числа !5 - 120
+ Генерируеться факториал числа !6 - 720
+ Генерируеться факториал числа !7 - 5040
- Потребляеться число 24
- Потребляеться число 120
+ Генерируеться факториал числа !8 - 40320
+ Генерируеться факториал числа !9 - 362880
- Потребляеться число 720
- Потребляеться число 5040
- Потребляеться число 40320
+ Генерируеться факториал числа !10 - 3628800
+ Генерируеться факториал числа !11 - 39916800
- Потребляеться число 362880
- Потребляеться число 3628800
- Потребляеться число 39916800
+ Генерируеться факториал числа !12 - 479001600
- Потребляеться число 479001600
+ Генерируеться факториал числа !13 - 6227020800
- Потребляеться число 6227020800
+ Генерируеться факториал числа !14 - 87178291200
+ Генерируеться факториал числа !15 - 1307674368000
- Потребляеться число 87178291200
- Потребляеться число 1307674368000
+ Генерируеться факториал числа !16 - 20922789888000
+ Генерируеться факториал числа !17 - 355687428096000
+ Генерируеться факториал числа !18 - 6402373705728000
- Потребляеться число 20922789888000
- Потребляеться число 355687428096000
+ Генерируеться факториал числа !19 - 121645100408832000
+ Генерируеться факториал числа !20 - 2432902008176640000
- Потребляеться число 6402373705728000
- Потребляеться число 121645100408832000
- Потребляеться число 2432902008176640000
+ Генерируеться факториал числа !21 - 51090942171709440000
- Потребляеться число 51090942171709440000
+ Генерируеться факториал числа !22 - 1124000727777607680000
- Потребляеться число 1124000727777607680000
+ Генерируеться факториал числа !23 - 25852016738884976640000
- Потребляеться число 25852016738884976640000
+ Генерируеться факториал числа !24 - 620448401733239439360000
- Потребляеться число 620448401733239439360000
+ Генерируеться факториал числа !25 - 15511210043330985984000000
- Потребляеться число 15511210043330985984000000
+ Генерируеться факториал числа !26 - 403291461126605635584000000
- Потребляеться число 403291461126605635584000000
+ Генерируеться факториал числа !27 - 10888869450418352160768000000
- Потребляеться число 10888869450418352160768000000
+ Генерируеться факториал числа !28 - 304888344611713860501504000000
- Потребляеться число 304888344611713860501504000000
+ Генерируеться факториал числа !29 - 8841761993739701954543616000000
+ Генерируеться факториал числа !30 - 265252859812191058636308480000000
- Потребляеться число 8841761993739701954543616000000
- Потребляеться число 265252859812191058636308480000000
Общая сумма: 274410818470142134209703780940313
 
*/
